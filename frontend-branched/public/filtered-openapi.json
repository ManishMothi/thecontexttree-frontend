{
  "openapi": "3.1.0",
  "info": {
    "title": "branched-backend",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/keys/": {
      "get": {
        "tags": [
          "key"
        ],
        "summary": "List Api Keys",
        "description": "List all active API keys for the authenticated user.",
        "operationId": "list_api_keys_api_v1_keys__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  },
                  "type": "array",
                  "title": "Response List Api Keys Api V1 Keys  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/keys/generate": {
      "post": {
        "tags": [
          "key"
        ],
        "summary": "Generate Api Key",
        "description": "Generate a new API key for the authenticated user.\n\nNote: The API key will only be shown once. Make sure to store it securely.",
        "operationId": "generate_api_key_api_v1_keys_generate_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/keys/{key_id}": {
      "delete": {
        "tags": [
          "key"
        ],
        "summary": "Deactivate Api Key",
        "description": "Deactivate an API key.\n\nThis operation is idempotent - if the key is already deactivated, it will return success.",
        "operationId": "deactivate_api_key_api_v1_keys__key_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/health": {
      "get": {
        "tags": [
          "context-tree"
        ],
        "summary": "Health Check",
        "description": "Basic health check returning user_id from api_key",
        "operationId": "health_check_api_v1_sessions_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Check Api V1 Sessions Health Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/sessions/user": {
      "get": {
        "tags": [
          "context-tree"
        ],
        "summary": "List all chat sessions for the current user",
        "description": "List all chat sessions for the authenticated user\n\nArgs:\n    user_id: The ID of the authenticated user\n    \nReturns:\n    List[ChatSessionRead]: List of chat sessions for the user\n    \nRaises:\n    HTTPException: If there's an error retrieving the sessions",
        "operationId": "get_my_sessions_api_v1_sessions_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChatSessionRead"
                  },
                  "type": "array",
                  "title": "Response Get My Sessions Api V1 Sessions User Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/sessions": {
      "post": {
        "tags": [
          "context-tree"
        ],
        "summary": "Post Session",
        "description": "Starts a new conversation \"session\" with an initial message and gets an LLM response.\n\nArgs:\n    payload: Contains the initial message for the conversation\n    user_id: The ID of the user creating the session\n    \nReturns:\n    ChatSessionRead: The newly created chat session with the first message and response\n    \nRaises:\n    HTTPException: If there's an error creating the session or generating the response",
        "operationId": "post_session_api_v1_sessions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSessionRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/sessions/{session_id}": {
      "get": {
        "tags": [
          "context-tree"
        ],
        "summary": "Get Session Info",
        "description": "Retrieve session info and the list of all nodes (branches) in that session\n\nArgs:\n    session_id: The ID of the session to retrieve\n    \nReturns:\n    ChatSessionRead: The requested chat session with its nodes\n    \nRaises:\n    HTTPException: If the session is not found or an error occurs",
        "operationId": "get_session_info_api_v1_sessions__session_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSessionRead"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "context-tree"
        ],
        "summary": "Delete Session Route",
        "description": "Delete a session and all its associated nodes (branches and messages).\n\nArgs:\n    session_id: The ID of the session to delete\n    \nReturns:\n    HTTP 204 No Content on success\n    \nRaises:\n    HTTPException: If the session is not found or not owned by the user",
        "operationId": "delete_session_route_api_v1_sessions__session_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/branches": {
      "post": {
        "tags": [
          "context-tree"
        ],
        "summary": "Post Branch",
        "description": "Create a new branch with an initial message and get an LLM response\n\nArgs:\n    session_id: The ID of the session\n    payload: Contains the parent node ID and the message for the new branch\n    \nReturns:\n    TreeNodeRead: The newly created branch node with message and LLM response\n    \nRaises:\n    HTTPException: If the parent node is not found, LLM service is unavailable, or an error occurs",
        "operationId": "post_branch_api_v1_sessions__session_id__branches_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreeNodeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreeNodeRead"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/branches/{branch_id}/msgs": {
      "get": {
        "tags": [
          "context-tree"
        ],
        "summary": "Get Messages",
        "description": "Retrieve all direct child nodes (messages) for a given branch, in chronological order\n\nArgs:\n    session_id: The ID of the session\n    branch_id: The ID of the branch to get messages from\n    \nReturns:\n    List[TreeNodeRead]: List of message nodes in chronological order\n    \nRaises:\n    HTTPException: If the branch is not found or an error occurs",
        "operationId": "get_messages_api_v1_sessions__session_id__branches__branch_id__msgs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          },
          {
            "name": "branch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Branch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNodeRead"
                  },
                  "title": "Response Get Messages Api V1 Sessions  Session Id  Branches  Branch Id  Msgs Get"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}/branches/{branch_id}": {
      "delete": {
        "tags": [
          "context-tree"
        ],
        "summary": "Delete Branch Node Route",
        "description": "Delete a branch node and all its descendants.\n\nArgs:\n    session_id: The ID of the session containing the branch\n    branch_id: The ID of the branch node to delete\n    \nReturns:\n    HTTP 204 No Content on success\n    \nRaises:\n    HTTPException: If the session or branch is not found, or if the user doesn't have permission",
        "operationId": "delete_branch_node_route_api_v1_sessions__session_id__branches__branch_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          },
          {
            "name": "branch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Branch Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/usage": {
      "get": {
        "tags": [
          "api usage"
        ],
        "summary": "Get Api Usage Route",
        "description": "Return usage stats for the *current* user (by Clerk ID), which used an API key.",
        "operationId": "get_api_usage_route_api_v1_usage_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKeyCreateResponse": {
        "properties": {
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "The generated API key (only shown once)"
          },
          "key_id": {
            "type": "string",
            "title": "Key Id",
            "description": "Unique identifier for the API key"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "When the key was created"
          }
        },
        "type": "object",
        "required": [
          "api_key",
          "key_id",
          "created_at"
        ],
        "title": "ApiKeyCreateResponse"
      },
      "ApiKeyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the API key"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "When the key was created"
          },
          "last_used_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used At",
            "description": "When the key was last used"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the key is currently active"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "is_active"
        ],
        "title": "ApiKeyResponse"
      },
      "ChatSessionCreate": {
        "properties": {
          "initial_message": {
            "type": "string",
            "title": "Initial Message",
            "description": "The initial message to start the conversation"
          }
        },
        "type": "object",
        "required": [
          "initial_message"
        ],
        "title": "ChatSessionCreate"
      },
      "ChatSessionRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/TreeNodeRead"
            },
            "type": "array",
            "title": "Nodes",
            "description": "List of nodes in the session"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "created_at"
        ],
        "title": "ChatSessionRead"
      },
      "ErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "A human-readable error message"
          },
          "error_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Type",
            "description": "Type of the error"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code",
            "description": "Error code for programmatic handling"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "Additional error context"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorResponse",
        "description": "Standard error response model"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "TreeNodeCreate": {
        "properties": {
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "title": "Parent Id"
          },
          "user_message": {
            "type": "string",
            "title": "User Message"
          }
        },
        "type": "object",
        "required": [
          "parent_id",
          "user_message"
        ],
        "title": "TreeNodeCreate"
      },
      "TreeNodeRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "chat_session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Chat Session Id"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "user_message": {
            "type": "string",
            "title": "User Message"
          },
          "llm_response": {
            "type": "string",
            "title": "Llm Response"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/TreeNodeRead"
            },
            "type": "array",
            "title": "Children",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "chat_session_id",
          "parent_id",
          "user_message",
          "llm_response",
          "created_at"
        ],
        "title": "TreeNodeRead"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}